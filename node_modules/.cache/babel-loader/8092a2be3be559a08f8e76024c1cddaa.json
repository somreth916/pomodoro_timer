{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Somreth\\\\Desktop\\\\QProject\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Session.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction Session({\n  mode,\n  focusTime,\n  breakTime,\n  focusRemaining,\n  breakRemaining\n}) {\n  // let currentDuration = mode === \"focus\" ? focusTime : breakTime;\n  // let percent = (1 - timeRemaining / (currentDuration * 60)) * 100;\n  // let leftoverTime = currentDuration - timeRemaining // total time - time left\n  if (mode === \"Stop\") {\n    return null;\n  }\n\n  function displayFocus() {\n    return focusTime === 3600 ? \"60:00\" : secondsToDuration(focusTime);\n  }\n\n  function displayFocusRemain() {\n    const time = focusTime - focusRemaining;\n    return time === 3600 ? \"60:00\" : secondsToDuration(time);\n  }\n\n  function displayBreakRemain() {\n    const time = breakTime - breakRemaining;\n    return secondsToDuration(time);\n  } // function breakTimer() {\n  //   return secondsToDuration(breakTime);\n  // }\n\n\n  function displayTitle() {\n    if (mode === \"Focus\") {\n      return `Focusing for ${displayFocus()} minutes`;\n    } else if (mode === \"Break\") {\n      return `On Break for ${secondsToDuration(breakTime)} minutes`;\n    }\n  }\n\n  function displayRemains() {\n    if (mode === \"Focus\") {\n      return `${displayFocusRemain()} remaining`;\n    } else if (timerState === \"Break\") {\n      return `${displayBreakRemain()} remaining`;\n    }\n  }\n\n  function progressBar() {\n    let time = 0;\n\n    if (mode === \"Focus\") {\n      time = focusRemaining / focusTime * 100;\n    } else if (mode === \"Break\") {\n      time = breakRemaining / breakTime * 100;\n    }\n\n    return time;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, displayTitle()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, displayRemains()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar() // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar()}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default Session;","map":{"version":3,"sources":["C:/Users/Somreth/Desktop/QProject/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Session.js"],"names":["React","minutesToDuration","secondsToDuration","Session","mode","focusTime","breakTime","focusRemaining","breakRemaining","displayFocus","displayFocusRemain","time","displayBreakRemain","displayTitle","displayRemains","timerState","progressBar","height","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction Session({mode, focusTime, breakTime, focusRemaining, breakRemaining}) {\r\n    // let currentDuration = mode === \"focus\" ? focusTime : breakTime;\r\n    // let percent = (1 - timeRemaining / (currentDuration * 60)) * 100;\r\n    // let leftoverTime = currentDuration - timeRemaining // total time - time left\r\n    if (mode === \"Stop\") {\r\n      return null;\r\n    }\r\n\r\n    function displayFocus() {\r\n      return focusTime === 3600 ? \"60:00\" : secondsToDuration(focusTime);\r\n    }\r\n\r\n    function displayFocusRemain() {\r\n      const time = focusTime - focusRemaining;\r\n      return time === 3600 ? \"60:00\" : secondsToDuration(time);\r\n    }\r\n\r\n    function displayBreakRemain() {\r\n      const time = breakTime - breakRemaining;\r\n      return secondsToDuration(time);\r\n    }\r\n\r\n    // function breakTimer() {\r\n    //   return secondsToDuration(breakTime);\r\n    // }\r\n\r\n    function displayTitle() {\r\n      if (mode === \"Focus\") {\r\n        return `Focusing for ${displayFocus()} minutes`;\r\n      } else if (mode === \"Break\") {\r\n        return `On Break for ${secondsToDuration(breakTime)} minutes`;\r\n      }\r\n    } \r\n  \r\n    function displayRemains() {\r\n      if (mode === \"Focus\") {\r\n        return `${displayFocusRemain()} remaining`;\r\n      } else if (timerState === \"Break\") {\r\n        return `${displayBreakRemain()} remaining`;\r\n      }\r\n    }\r\n  \r\n    function progressBar() {\r\n      let time = 0;\r\n      if (mode === \"Focus\") {\r\n        time = ((focusRemaining / focusTime) * 100);\r\n      } else if (mode === \"Break\") {\r\n        time = ((breakRemaining / breakTime) * 100);\r\n      }\r\n      return time;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n             {displayTitle()}\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {displayRemains()}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={progressBar()} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${progressBar()}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Session;"]},"metadata":{},"sourceType":"module"}